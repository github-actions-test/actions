#!/usr/bin/env bash
set -eEuo pipefail

parse-log() {
    local -r aggregate='BEGIN {FS=OFS=SUBSEP=" "}{arr[$1] = $2} END {for (i in arr) print i,arr[i]}'
    local -r pattern='Update .+ https?://[a-zA-Z0-9./?=_-]*'
    git log --reverse --pretty=%B | grep -E "$pattern" | while read -r x; do
        echo $x | cut -d' ' -f2,3
    done | awk "$aggregate"
}

parse-output() {
    log() {
        printf "%s %s\n" "$1" "$2"
    }

    download() {
        curl --fail --silent "$1" | tar -C "$2" -zxv --transform 's#include#usr/include#' --show-stored-names
    }

    while read -r action arg1 arg2; do
	case "$action" in
	    log) log "$arg1" "$arg2" ;;
	    download) download "$arg2" "$extract_path" ;;
	    set) eval "$arg1=$arg2" ;;
	esac
    done < <(cat /dev/stdin)
}

parse-args() {
    python -c "
import argparse
import sys

parser = argparse.ArgumentParser(description='Print download URL for submodule artifacts')
parser.add_argument('--exclude', default=[], action='append', help='submodule to exclude')
parser.add_argument('--include', default=[], action='append', help='submodule to include')
parser.add_argument('--silent', default=False, action='store_true', help='do not print the URLs')
parser.add_argument('--download', default=False, action='store_true', help='download and extract the artifacts')
parser.add_argument('--extract-path', default='.', type=str, help='path to extract artifacts to')

args = parser.parse_args()

modules = [x.strip().split(' ') for x in sys.stdin.readlines()]
everything = set(map(lambda x: x[0], modules))
selection = (everything - set(args.exclude)) & (set(args.include) if len(args.include) > 0 else everything)

print('set extract_path %s' % args.extract_path)

for module in [module for module in modules if module[0] in selection]:
    module = ' '.join(module)
    if not args.silent:
        print('log %s' % module)
    if args.download:
        print('download %s' % module)
" $*
}

parse-log | parse-args $* | parse-output
